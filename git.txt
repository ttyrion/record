1、git和svn很大的区别之一，就是git是“分布式”的。
说“分布式”太抽象了。具体地说：就是每一个终端机器都是一台完整的服务器，就算没有中央服务器（svn不能没有中央服务器，而git没有中央服务器也可以工作，只不过是让developers之间交换工作成果变得很麻烦），
git也可以工作。
也就是说：每台机器都保存了git仓库的完整备份。就算与与中央服务器失去链接，甚至是没有网络，git依然可以工作。
因为自己的机器就是一台git服务器。我们可以向本地提交工作。

理解git的一切，首先就算要理解“git目录”，也就是目录中.git这个目录。这个目录是用来保存元数据和对象数据库的地方。每次clone镜像仓库的时候，实际就算copy这个git目录的数据。
从项目中取出某个版本的所有文件和目录，用来开始工作的叫做工作目录：也就是包含我们的代码目录。
注意：：：：工作目录其实就是从git目录中的压缩对象数据库中提取出来的。
知道这一点，就不难理解为什么git可以没有中央服务器，可以没有网络。
因为我们完全可以把自己的机子当做一个服务器，更详细地说，就是那个“git目录”就是我们的服务器。
我们向那个服务器（目录）提交修改，以及回退到那个服务器记录的某个历史版本。这一切操作仅仅只是在操作本地（操作本地服务器，即本地git仓库）。
git会在本地服务器中记录所有的改动历史，也会根据操作，从仓库中复制出正确的内容到我们的工作目录。

2、暂存区
暂存区也在git目录中。暂存区也是git一个非常重要的概念。
git的文件状态有三种：modified，staged, committed。可想而知，暂存区有多重要。
git的很多操作，比如add，stage就是在把我们的修改保存到暂存区中。最后一次性把暂存区中的修改提交（commit）到git仓库中（这里依然是指本地仓库）。

3、git checkout
git checkout命令容易产生误解。
checkout常用于以下三种场景：
3.1 切换分支
    git checkout branch_name
3.2 创建本地分支
    git checkout -b branch_name
3.3 拉取本地不存在的文件
    git checkout filename 拉取文件filename
    git checkout .        拉取当前目录

4、git pull 和git fetch
git fetch：相当于是从远程获取最新版本到本地(比如：fetch origin master到本地的master)，不会自动merge
git pull：相当于是从远程获取最新版本并merge到本地
也就是说git pull 相当于git fetch + git merge

5、分支重命名
5.1重命名本地分支	
git branch -m [old] [new]
5.2重命名远程分支
重命名远程分支就是删除远程分支、重命名本地分支、推送本地分支到远程
git push --delete origin [old]
git branch -m [old] [new]
git push origin new
其中，如果当期位于old分支内，重命名分支可以不用制定old分支名。

6、修改最近一次的提交日志
git commit --amend -m ”新日志”
如果之前的commit已经被push到远程，那么还需要git push --force来把远程分支的提交日志改掉。

7、撤销git add
要从暂存区撤销添加的文件可以用reset。
撤销添加某个文件： git reset <file>
撤销添加所有文件： git reset

7、git pull时遇到error: cannot lock ref ‘xxx’: ref xxx is at （一个commitID） but expected的解决办法
问题原因：
原因是你这个git工程的.git/refs目录下跟踪的某些git分支，在git pull的时候，与远端的对应分支的refs对比发现不同，所以导致git pull报错。
通常产生这个问题的原因是（以分支git/yousa/feature_01为例）：
有人操作git/yousa/feature_01这个分支，在git push的时候使用了git push –force，（当然这个人的git push是push不上去），导致远端分支被覆盖，你本地的refs与远端无法一致，导致问题
git分支是不区分大小写的，如果有人删除掉这个远端分支又重新新建了一个这个分支也会出现同样的问题。

解决办法：
根据前面的原因有一些操作方法，基本思路就是要么，强行git pull；要么则是删除掉有问题的refs，再进行git pull（个人还是推荐第二种）
（以分支git/yousa/feature_01为例）
7.1、删除有问题的refs，可以直接在.git/refs下面根据错误提示删除对应的refs文件，比如这个就是需要删除refs/remotes/origin/git/yousa/feature_01文件（嫌麻烦直接删除整个refs目录也行）
或者：使用git命令删除相应refs文件，git update-ref -d refs/remotes/origin/git/yousa/feature_01
7.2、简单粗暴强行git pull，执行git pull -p

8、merge
8.1 merge分支
git生成一个merge request的时候，并不是基于某次或某几次commit，而是基于两个分支的差异状态。
举例说明：
有两个分支：一个master，一个基于master创建的分支dev。
master一直在开发前进，dev也一直在开发前进。因为dev最终也要merge到master中，所以最好是dev在开发的过程中经常merge一下master（有可能要解决冲突）。
这样的开发状态在持续一段时间以后，dev上会有很多次与master有差异的commit。当要把dev分支merge到master的时候，基于git merge是基于分支差异，而不是一次次的commit，
这个merge过程会非常简单：发起一个把dev分支merge到master的request即可。本地也可以如下验证：
(master)：
git checkout -b master2
(master2)
git merge remotes/origin/dev
此时可以发现，merge成功，并没有任何冲突，所有的dev分支的commit记录都合并到了master2分支，证明把dev merge到master是没有问题的。
试想一下，如果merge request是基于一次次的commit，上述开发场景中最后合并代码的工作量恐怕会很恐怖。

8.2 merge某次提交
git也可以把其他分支的某次提交merge到当前分支:
git cherry-pick [commit-id]

9、git删除文件：包括历史记录
有些时候不小心上传了一些敏感文件(例如密码), 就需要一个方法, 永久的删除这些文件(包括该文件的历史记录).
9.1 从本地repo中删除该文件
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch path-of-your-removing-file' --prune-empty --tag-name-filter cat -- --all
其中path-of-your-removing-file是打算删除的文件。如果是多个文件，也可以用通配符。比如删除sound目录下面所有以music开头的文件,就可以这样：
git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch sound/music*.mp3' --prune-empty --tag-name-filter cat -- --all
看到类似“# Ref 'refs/heads/master' was rewritten”说明删除成功。
9.2 push修改后的repo
git push origin master --force
这虽然跟删掉重新建一个repo有些类似, 但是好处是保留了其他不被删除的文件原有的历史记录, 所以还是有些不同的. 
9.3 清理回收空间
虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC)，所以我们要用命令彻底清除它, 并收回空间。
rm -rf .git/refs/original/
git reflog expire --expire=now --all
git gc --prune=now
git gc --aggressive --prune=now

10、git清理
10.1 测试清理，列出哪些文件会被清理
    git clean -n
10.2 删除当前目录下所有没有track的文件，不会删除.gitignore文件里面指定的文件，不论这些文件有没有被track
    git clean -f
10.3 删除指定路径下的没有被track的文件和文件夹
    git clean [dir] -df

11、 git取两次commit之间的日志
11.1 git获取最近一次的提交id
    git rev-parse HEAD
11.2 git获取两次提交之间的日志
    git log [commit_id_1]..[commit_id_2]
    取(commit_id_1, commit_id_2]之间的提交日志。

12. Permanently authenticating with Git repositories:
    12.1 Run following command to enable credential caching:

    xxx:~/github/Linux> git config credential.helper store
    xxx:~/github/Linux> git push https://github.com/ttyrion/Linux.git
    Username for 'https://github.com': <username>
    Password for 'https://ttyrion@github.com': <passwd>
    Everything up-to-date
    
    12.2 After that, Use should also specify caching expire,
    xxx:~/github/Linux> git config --global credential.helper 'cache --timeout 7200'
After enabling credential caching, it will be cached for 7200 seconds (2 hour).






